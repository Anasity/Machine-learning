import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Загрузка данных
file_path_A = "A.xlsx"  # Путь к файлу с данными по первой валюте
file_path_B = "B.xlsx"  # Путь к файлу с данными по второй валюте

df_A = pd.read_excel(file_path_A).sort_values("data").reset_index(drop=True)  # Загрузка данных по первой валюте, сортировка по дате
df_B = pd.read_excel(file_path_B).sort_values("data").reset_index(drop=True)  # Загрузка данных по второй валюте, сортировка по дате

merged = pd.merge(df_A, df_B, on="data", suffixes=("_A", "_B"))  # Объединение данных по дате с добавлением суффиксов к столбцам

t = np.arange(1, len(merged) + 1)  # Создание массива порядковых номеров (от 1 до количества строк в объединенном DataFrame)
x = merged["val_A"].values  # Извлечение значений курса первой валюты (Злотый) в виде массива NumPy
y = merged["val_B"].values  # Извлечение значений курса второй валюты (Болгарский лев) в виде массива NumPy

xy_ratio = x / y  # Вычисление отношения курсов валютной пары (x / y)

# Функция линейной регрессии
def linear_regression(t, x):
    A = (np.mean(x*t) - np.mean(x) * np.mean(t)) / (np.mean(t**2) - np.mean(t)**2)  # Вычисление коэффициента A (наклон)
    B = np.mean(x) - A * np.mean(t)  # Вычисление коэффициента B (смещение)
    return A, B  # Возврат коэффициентов A и B

# Линейная регрессия для {t, x}
A, B = linear_regression(t, xy_ratio)  # Вычисление коэффициентов A и B для отношения курсов
xy_ratio_reg = A * t + B  # Вычисление значений линейной регрессии

# Производные
xy_deriv1 = np.gradient(xy_ratio, t)  # Вычисление первой производной отношения курсов
xy_deriv2 = np.gradient(xy_deriv1, t)  # Вычисление второй производной отношения курсов

# Линейные регрессии для производных
A_1, B_1 = linear_regression(t, xy_deriv1)  # Вычисление коэффициентов A и B для первой производной
A_2, B_2 = linear_regression(t, xy_deriv2)  # Вычисление коэффициентов A и B для второй производной

xy_deriv1_reg = A_1 * t + B_1  # Вычисление значений линейной регрессии для первой производной
xy_deriv2_reg = A_2 * t + B_2  # Вычисление значений линейной регрессии для второй производной

# Интегрирование
xy_ratio_int = (A_1 * (t**2) / 2) + (B_1 * t) + B  # Вычисление первого интеграла для функции
xy_ratio_2int = (A_2 * (t**3) / 6) + (B_2 * (t**2) / 2) + B_1 * t + B  # Вычисление второго интеграла для функции
xy_ratio_int_d1 = (A_2 * (t**2) / 2) + (B_2 * t) + B_1  # Вычисление интеграла для производной

# Построение графиков

# График 1: Исходная функция и интегралы
plt.figure(figsize=(8, 6))  # Создание фигуры для графика
plt.plot(t, xy_ratio, label="Функция")  # Построение графика исходной функции
plt.plot(t, xy_ratio_reg, label="Линейная регрессия (A*t+B)")  # Построение графика линейной регрессии
plt.plot(t, xy_ratio_int, label="Первый интеграл (A*t^2/2+B*t+B")  # Построение графика первого интеграла
plt.plot(t, xy_ratio_2int, label="Второй интеграл (A*t^3/6+B*t^2/2+B*t+B")  # Построение графика второго интеграла
plt.legend()  # Добавление легенды
plt.show()  # Отображение графика

# График 2: Первая производная
plt.figure(figsize=(8, 6))  # Создание фигуры для графика
plt.plot(t, xy_deriv1, label="Производная")  # Построение графика первой производной
plt.plot(t, xy_deriv1_reg, label="Линейная регрессия (A1*t+B1")  # Построение графика линейной регрессии для первой производной
plt.plot(t, xy_ratio_int_d1, label="Первый интеграл (A1*t^2/2+B1*t+B1")  # Построение графика интеграла для производной
plt.legend()  # Добавление легенды
plt.show()  # Отображение графика

# График 3: Вторая производная
plt.figure(figsize=(8, 6))  # Создание фигуры для графика
plt.plot(t, xy_deriv2, label="2-я производная")  # Построение графика второй производной
plt.plot(t, xy_deriv2_reg, label="Линейная регрессия (A2*t+B2")  # Построение графика линейной регрессии для второй производной
plt.legend()  # Добавление легенды
plt.show()  # Отображение графика

